[
  {
    "instructions": "Trouvez le nombre de films",
    "solutionQuery": "MATCH (m: Movie) RETURN COUNT(m) as count;"
  },
  {
    "instructions": "Trouvez le nombre de films d'action",
    "solutionQuery": "MATCH (m: Movie {genre: 'Action'}) RETURN COUNT(m) as count;"
  },
  {
    "instructions": "Trouvez tous les titres de films joués par Vincent Cassel",
    "solutionQuery": "MATCH (m: Movie)<-[:ACTS_IN]-(a:Actor {name: 'Vincent Cassel'}) return m.title as title;"
  },
  {
    "instructions": "Trouvez tous les titres de films que James Cameron a dirigé",
    "solutionQuery": "MATCH (m: Movie)<-[:DIRECTED]-(:Director {name: 'James Cameron'}) return m.title as title;"
  },
  {
    "instructions": "Trouvez tous les titres de films que James Cameron a dirigé pour le compte des studios Paramount Pictures",
    "solutionQuery": "MATCH (m: Movie {studio: 'Paramount Pictures'})<-[:DIRECTED]-(:Director {name: 'James Cameron'}) return m.title as title;"
  },
  {
    "instructions": "Trouvez les noms des acteurs qui ont joué dans le film que James Cameron a créé pour le compte des studios Paramount Pictures",
    "solutionQuery": "MATCH (a: Actor)-[:ACTS_IN]->(m: Movie {studio: 'Paramount Pictures'})<-[:DIRECTED]-(:Director {name: 'James Cameron'}) return a.name as name;"
  },
  {
    "instructions": "Trouvez le nom de l'acteur qui a joué à la fois dans Titanic et The Lord of the Rings: The Return of the King",
    "solutionQuery": "MATCH (a: Actor)-[:ACTS_IN]->(:Movie {title: 'Titanic'}), (a)-[:ACTS_IN]->(:Movie {title:'The Lord of the Rings: The Return of the King'}) return a.name as name;"
  },
  {
    "instructions": "Trouvez tous les noms de film ayant une note ainsi que les personnes qui les ont notés",
    "solutionQuery": "MATCH (m: Movie)<-[:RATED]-(p: Person) return p.name as name ,m.title as title;"
  },
  {
    "instructions": "Trouvez tous les noms de film ayant une note de 5 ainsi que les personnes qui les ont notés",
    "solutionQuery": "MATCH (m: Movie)<-[:RATED {stars: 5}]-(p: Person) return p.name as name ,m.title as title;"
  },
  {
    "instructions": "Trouvez tous les noms des personnes ayant dirigé les films dont le titre est exactement Titanic",
    "solutionQuery": "MATCH (:Movie {title: 'Titanic'})<-[:DIRECTED]-(p:Person) RETURN p.name as name;"
  },
  {
    "instructions": "Trouvez tous les noms des personnes ayant dirigé les films dont le titre contient Titanic\nAstuce Cypher : il n'existe pas de fonction CONTAINS en Cypher, on utilisera plutôt `string =~ 'my-regex'`",
    "solutionQuery": "MATCH (m: Movie) where lower(m.title) =~ '.*titanic.*' return m.title as title;"
  },
  {
    "instructions": "Trouvez tous les titres de film commençant par 'for' (case-insensitive) avec leur nombre éventuel de stars (null sinon)",
    "solutionQuery": "MATCH (m:Movie) WHERE LOWER(m.title) =~ 'for.*' OPTIONAL MATCH (m)<-[r:RATED]-(:User)  RETURN m.title AS title, r.stars AS stars"
  },
  {
    "instructions": "France Télévisions est furieuse Patrick Sébastien n'est pas dans le graphe !\nPatrick Sébastien est à la fois acteur et producteur, le but du jeu est donc d'insérer un noeud avec les deux labels correspondant et son nom.",
    "solutionQuery": "MATCH (n:Actor:Director {name:'Patrick Sébastien'}) RETURN n.name AS name",
    "writeQuery": "CREATE (:Actor:Director {name:'Patrick Sébastien'})"
  },
  {
    "instructions": "Toujours pas satisfaite, France TV revient à la charge !\nIl faut de nouveau ajouter Patrick Sébastien (seul son rôle de DIRECTOR importe ici) mais également un des films dont il a le secret (insérer aussi le fait qu'il l'a dirigé):\nT'aime, sorti en français en 1999 (définissez simplement son titre, sa langue et son timestamp de sortie: 922917600).",
    "solutionQuery": "MATCH (director:Director {name:'Patrick Sébastien'})-[:DIRECTED]->(movie:Movie {title:\"T'aime\", language:'fr', releaseDate:922917600}) RETURN director.name, movie.title, movie.language, movie.releaseDate",
    "writeQuery": "CREATE (:Director {name:'Patrick Sébastien'})-[:DIRECTED]->(:Movie {title:\"T'aime\", language:'fr', releaseDate:922917600})"
  },
  {
    "instructions": "Fait étrange : l'utilisateur Emil Eifrem (accessoirement CEO de Neo Technology, mais c'est une autre histoire), n'a pas encore évalué le film 'The Matrix Revolutions' contrairement aux deux opus précédents de la trilogie.\nCorrigeons cette erreur : Emil a aimé moyennement le film (3 stars) avec le commentaire: \"Meh, liked the previous ones better\".",
    "solutionQuery": "MATCH (emil:User {name:'Emil Eifrem'}), (matrix:Movie {title:'The Matrix Revolutions'}) OPTIONAL MATCH (emil)-[r:RATED]->(matrix) RETURN r.stars AS stars, r.comment AS comment",
    "writeQuery": "MATCH (emil:User {name:'Emil Eifrem'}), (matrix:Movie {title:'The Matrix Revolutions'}) CREATE (emil)-[:RATED {stars:3, comment:'Meh, liked the previous ones better'}]->(matrix)"
  },
  {
    "instructions": "D'ailleurs, réparons une injustice. Emil Eifrem devrait aussi être caractérisé par son rôle de CEO : sans lui, pas d'atelier aujourd'hui !\nAjoutons-lui un attribut 'profession' dont la valeur sera 'CEO'.",
    "solutionQuery": "MATCH (emil:User {name:'Emil Eifrem'}) RETURN emil.profession AS profession",
    "writeQuery": "MATCH (emil:User {name:'Emil Eifrem'}) SET emil.profession = 'CEO'"
  },
  {
    "instructions": "L'union des producteurs est révoltée : certaines évaluations sont en dessous de 5/5 !\nPour éviter que la purge soit trop évidente, l'union a décidé de supprimer toutes les évaluations en dessous de 5, si et seulement si le login de l'utilisateur contient un A (case-insensitive).\nAstuce Cypher : il n'existe pas de fonction CONTAINS en Cypher, on utilisera plutôt `string =~ 'my-regex'`",
    "solutionQuery": "MATCH (u:User)-[r:RATED]->(:Movie) WHERE r.stars < 5 RETURN u.login AS login ORDER BY login ASC",
    "writeQuery": "MATCH (u:User)-[r:RATED]->(:Movie) WHERE r.stars < 5 AND LOWER(u.login) =~ '.*a.*' DELETE r"
  },
  {
    "instructions": "L'experte SEO Agnès Iho vous demande d'agir vite : supprimez les commentaires de moins de 15 caractères sinon le référencement va sombrer !\nAttention, les évaluations doivent rester !",
    "solutionQuery": "MATCH (:User)-[r:RATED]->(:Movie) WHERE EXISTS(r.comment) RETURN LENGTH(r.comment) AS comment_length ORDER BY LENGTH(r.comment) ASC",
    "writeQuery": "MATCH (:User)-[r:RATED]->(:Movie) WHERE LENGTH(r.comment) < 15 REMOVE r.comment"
  },
  {
    "instructions": "L'architecte logiciel Rachid Tecte vient vous demander une optimisation.\nPlutôt que de le calculer à la volée, il souhaiterait persister le nombre de commentaires par film comme attribut de chaque film. Appelons cet attribut 'comment_count' (parce que 'machin', ça sonnait moins bien).\nAstuce Cypher : COLLECT est votre ami !",
    "solutionQuery": "MATCH (m:Movie) WHERE m.comment_count > 0 RETURN m.title AS movie_title_with_at_least_one_comment",
    "writeQuery": "MATCH (m:Movie)<-[r:RATED]-(:User) WHERE EXISTS(r.comment) WITH m, COLLECT(r.comment) AS comments SET m.comment_count = LENGTH(comments)"
  },
  {
    "instructions": "Finalement, l'union des producteurs a revu sa position.\nPlutôt que de retirer les mauvaises évaluations (note < 5), ils préfèreraient cette fois que vous signaliez les mauvaises évaluations via un nouvel attribut appelé 'hidden' si leur auteur est influent (au moins 1 ami).",
    "solutionQuery": "MATCH (u:User)-[r:RATED {hidden: true}]->(m:Movie) RETURN u.login AS login, r.stars AS hidden_review_stars, m.title AS title",
    "writeQuery": "MATCH (f:User)-[:FRIEND]-(u:User) WITH LENGTH(COLLECT(f)) AS friend_count,u WHERE friend_count >= 1 MATCH (u)-[r:RATED]->(:Movie) WHERE r.stars < 5 WITH COLLECT(r) AS ratings FOREACH(rating IN ratings | SET rating.hidden = true)"
  }
]
